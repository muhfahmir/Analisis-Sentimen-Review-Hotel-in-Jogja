var <- reactive({
switch (input$selectCity,
#"Jakarta" = setNames(jakarta$link, jakarta$name),
#"Bandung" = setNames(bandung$link, bandung$name),
#"Semarang" = setNames(semarang$link, semarang$name),
"Yogyakarta" = setNames(yogyakarta$link, yogyakarta$name)
#"Surabaya" = setNames(surabaya$link, surabaya$name)
)
})
output$selectHotel <- renderUI({
selectInput(inputId  =  "selectHotel",
label = "Pilih Hotel",
choices = var())
})
#get data
data <- reactive({
withProgress({
setProgress(message = "Collecting data", value = 0)
result <- get_hotel_reviews(input$selectHotel, input$size, incProgress)
})
#mengembalikan hasil scrapping
return(result)
})
#memprediksi data
prediction_data <- reactive({
withProgress({
setProgress(message = "Predicting sentiment", value = 0)
reviews <- data()$review
incProgress(1/2)
prediction <- predict_sentiment(reviews)
incProgress(1/2)
})
prediction$reviewer <- data()$reviewer
return(prediction)
})
#mengeluarkan data dalam bentuk table
output$table_review <- renderDataTable(datatable({
prediction_data()
}))
#data total review diatas
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(prediction_data()), " review"),
icon = icon("pen"),
color = "blue"
)
})
#mengeluarkan data diatas yang positive jumlahnya
output$positive_review <- renderValueBox({
valueBox(
"Positive",
paste0(nrow(prediction_data() %>% filter(sentiment == "Positive")), " review"),
icon = icon("smile"),
color = "green")
})
#mengeluarkan data diatas yang negatif jumlahnya
output$negative_review <- renderValueBox({
valueBox(
"Negative",
paste0(nrow(prediction_data() %>% filter(sentiment == "Negative")), " review"),
icon = icon("frown"),
color = "red")
})
#mengeluarkan data wordcloud / data yang sering disebut
output$wordcloud <- renderPlot({
data.corpus <- clean_data(data()$review)
wordcloud(data.corpus, min.freq = 1,
scale=c(3.5,0.25),
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinycssloaders)
library(wordcloud)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
#function untuk get data dari url (scrapping)
source("scrapper/review.R")
#function untuk menentukan data training dan sentimen pada sebuah review
source("classifier/naive_bayes.R")
yogyakarta <- readRDS('dataset/yogyakarta.rds')
features <- readRDS(features_rds_path)
#ini buat tampilan / Front End
ui <- dashboardPage(
#judul website
dashboardHeader(title = "Tripadvisor Hotel Jogja Review"),
#sebelah kiri
dashboardSidebar(
selectInput(
"selectCity",
label = "Select City",
choices = c("Yogyakarta")
),
uiOutput("selectHotel"),
#input data yang ingin ditampilkan
sliderInput(
"size",
"Total reviews",
min = 0,
max = 1000,
value = 20
),
#tombol submit
fluidPage(
submitButton("Submit"),
)
),
#sebelah kanan
dashboardBody(
#3box diatas
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("positive_review"),
valueBoxOutput("negative_review")
),
#hasil sentimen
fluidRow(
box(
title = "Sentimen Analisis",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"),
style = "font-size: 70%;")
),
),
#hasil cloud
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 12,
collapsible = T,
plotOutput("wordcloud") %>% withSpinner(color="#1167b1")
),
)
)
)
#pemrosesan data / Backend
server <- function(input, output) {
var <- reactive({
switch (input$selectCity,
#"Jakarta" = setNames(jakarta$link, jakarta$name),
#"Bandung" = setNames(bandung$link, bandung$name),
#"Semarang" = setNames(semarang$link, semarang$name),
"Yogyakarta" = setNames(yogyakarta$link, yogyakarta$name)
#"Surabaya" = setNames(surabaya$link, surabaya$name)
)
})
output$selectHotel <- renderUI({
selectInput(inputId  =  "selectHotel",
label = "Pilih Hotel",
choices = var())
})
#get data
data <- reactive({
withProgress({
setProgress(message = "Collecting data", value = 0)
result <- get_hotel_reviews(input$selectHotel, input$size, incProgress)
})
#mengembalikan hasil scrapping
return(result)
})
#memprediksi data
prediction_data <- reactive({
withProgress({
setProgress(message = "Predicting sentiment", value = 0)
reviews <- data()$review
incProgress(1/2)
prediction <- predict_sentiment(reviews)
incProgress(1/2)
})
prediction$reviewer <- data()$reviewer
return(prediction)
})
#mengeluarkan data dalam bentuk table
output$table_review <- renderDataTable(datatable({
prediction_data()
}))
#data total review diatas
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(prediction_data()), " review"),
icon = icon("pen"),
color = "blue"
)
})
#mengeluarkan data diatas yang positive jumlahnya
output$positive_review <- renderValueBox({
valueBox(
"Positive",
paste0(nrow(prediction_data() %>% filter(sentiment == "Positive")), " review"),
icon = icon("smile"),
color = "green")
})
#mengeluarkan data diatas yang negatif jumlahnya
output$negative_review <- renderValueBox({
valueBox(
"Negative",
paste0(nrow(prediction_data() %>% filter(sentiment == "Negative")), " review"),
icon = icon("frown"),
color = "red")
})
#mengeluarkan data wordcloud / data yang sering disebut
output$wordcloud <- renderPlot({
data.corpus <- clean_data(data()$review)
wordcloud(data.corpus, min.freq = 1,
scale=c(3.5,0.25),
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinycssloaders)
library(wordcloud)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
#function untuk get data dari url (scrapping)
source("scrapper/review.R")
#function untuk menentukan data training dan sentimen pada sebuah review
source("classifier/naive_bayes.R")
features <- readRDS(features_rds_path)
#ini buat tampilan / Front End
ui <- dashboardPage(
#judul website
dashboardHeader(title = "Tripadvisor Hotel Jogja Review"),
#sebelah kiri
dashboardSidebar(
#input url pada sidebar kiri
#textInput(
#"url",
#"Enter tripadvisor pariwisata url",
#placeholder = "url",
#value = "https://www.tripadvisor.com/Hotel_Review-g14782503-d3737584-Reviews-Hotel_Tentrem_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html"
#),
#select
selectInput("url", h3("Select Wisata"),
choices = list(
"Hotel Ibis Malioboro"="https://www.tripadvisor.com/Hotel_Review-g14782503-d299576-Reviews-Ibis_Yogyakarta_Malioboro_Hotel-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Neo"="https://www.tripadvisor.com/Hotel_Review-g14782503-d8092831-Reviews-Hotel_Neo_Malioboro-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Tentrem"="https://www.tripadvisor.com/Hotel_Review-g14782503-d3737584-Reviews-Hotel_Tentrem_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Grand Zuri"="https://www.tripadvisor.com/Hotel_Review-g14782503-d5256525-Reviews-Grand_Zuri_Malioboro_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html"
#"Malioboro"="https://www.tripadvisor.com/Attraction_Review-g294230-d447268-Reviews-Malioboro_Road-Yogyakarta_Region_Java.html",
#"Pasar Beringharjo"="https://www.tripadvisor.com/Attraction_Review-g294230-d450887-Reviews-Beringharjo_Market-Yogyakarta_Region_Java.html",
#"Candi Prambanan"="https://www.tripadvisor.com/Attraction_Review-g8067878-d317481-Reviews-Prambanan_Temples-Prambanan_Central_Java_Java.html",
#"Candi Ijo"="https://www.tripadvisor.com/Attraction_Review-g294230-d4351915-Reviews-Ijo_Temple-Yogyakarta_Region_Java.html",
#"Gua Pindul" = "https://www.tripadvisor.com/Attraction_Review-g294230-d3874301-Reviews-Pindul_Cave-Yogyakarta_Region_Java.html"
),
selected="https://www.tripadvisor.com/Hotel_Review-g14782503-d299576-Reviews-Ibis_Yogyakarta_Malioboro_Hotel-Yogyakarta_Yogyakarta_Region_Java.html"),
#input data yang ingin ditampilkan
sliderInput(
"size",
"Total reviews",
min = 0,
max = 1000,
value = 20
),
#tombol submit
fluidPage(
submitButton("Submit"),
)
),
#sebelah kanan
dashboardBody(
#3box diatas
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("positive_review"),
valueBoxOutput("negative_review")
),
#hasil sentimen
fluidRow(
box(
title = "Sentimen Analisis",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"),
style = "font-size: 70%;")
),
),
#hasil cloud
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 12,
collapsible = T,
plotOutput("wordcloud") %>% withSpinner(color="#1167b1")
),
)
)
)
#pemrosesan data / Backend
server <- function(input, output) {
#get data
data <- reactive({
withProgress({
setProgress(message = "Collecting data", value = 0)
result <- get_pariwisata_reviews(input$url, input$size, incProgress)
})
#mengembalikan hasil scrapping
return(result)
})
#memprediksi data
prediction_data <- reactive({
withProgress({
setProgress(message = "Predicting sentiment", value = 0)
reviews <- data()$review
incProgress(1/2)
prediction <- predict_sentiment(reviews)
incProgress(1/2)
})
prediction$reviewer <- data()$reviewer
return(prediction)
})
#mengeluarkan data dalam bentuk table
output$table_review <- renderDataTable(datatable({
prediction_data()
}))
#data total review diatas
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(prediction_data()), " review"),
icon = icon("pen"),
color = "blue"
)
})
#mengeluarkan data diatas yang positive jumlahnya
output$positive_review <- renderValueBox({
valueBox(
"Positive",
paste0(nrow(prediction_data() %>% filter(sentiment == "Positive")), " review"),
icon = icon("smile"),
color = "green")
})
#mengeluarkan data diatas yang negatif jumlahnya
output$negative_review <- renderValueBox({
valueBox(
"Negative",
paste0(nrow(prediction_data() %>% filter(sentiment == "Negative")), " review"),
icon = icon("frown"),
color = "red")
})
#mengeluarkan data wordcloud / data yang sering disebut
output$wordcloud <- renderPlot({
data.corpus <- clean_data(data()$review)
wordcloud(data.corpus, min.freq = 1,
scale=c(3.5,0.25),
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinycssloaders)
library(wordcloud)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
#function untuk get data dari url (scrapping)
source("scrapper/review.R")
#function untuk menentukan data training dan sentimen pada sebuah review
source("classifier/naive_bayes.R")
features <- readRDS(features_rds_path)
#ini buat tampilan / Front End
ui <- dashboardPage(
#judul website
dashboardHeader(title = "Tripadvisor Hotel Jogja Review"),
#sebelah kiri
dashboardSidebar(
#input url pada sidebar kiri
#textInput(
#"url",
#"Enter tripadvisor pariwisata url",
#placeholder = "url",
#value = "https://www.tripadvisor.com/Hotel_Review-g14782503-d3737584-Reviews-Hotel_Tentrem_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html"
#),
#select
selectInput("url", h3("Select Wisata"),
choices = list(
"Hotel Ibis Malioboro"="https://www.tripadvisor.com/Hotel_Review-g14782503-d299576-Reviews-Ibis_Yogyakarta_Malioboro_Hotel-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Neo"="https://www.tripadvisor.com/Hotel_Review-g14782503-d8092831-Reviews-Hotel_Neo_Malioboro-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Tentrem"="https://www.tripadvisor.com/Hotel_Review-g14782503-d3737584-Reviews-Hotel_Tentrem_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html",
"Hotel Grand Zuri"="https://www.tripadvisor.com/Hotel_Review-g14782503-d5256525-Reviews-Grand_Zuri_Malioboro_Yogyakarta-Yogyakarta_Yogyakarta_Region_Java.html"
#"Malioboro"="https://www.tripadvisor.com/Attraction_Review-g294230-d447268-Reviews-Malioboro_Road-Yogyakarta_Region_Java.html",
#"Pasar Beringharjo"="https://www.tripadvisor.com/Attraction_Review-g294230-d450887-Reviews-Beringharjo_Market-Yogyakarta_Region_Java.html",
#"Candi Prambanan"="https://www.tripadvisor.com/Attraction_Review-g8067878-d317481-Reviews-Prambanan_Temples-Prambanan_Central_Java_Java.html",
#"Candi Ijo"="https://www.tripadvisor.com/Attraction_Review-g294230-d4351915-Reviews-Ijo_Temple-Yogyakarta_Region_Java.html",
#"Gua Pindul" = "https://www.tripadvisor.com/Attraction_Review-g294230-d3874301-Reviews-Pindul_Cave-Yogyakarta_Region_Java.html"
),
selected="https://www.tripadvisor.com/Hotel_Review-g14782503-d299576-Reviews-Ibis_Yogyakarta_Malioboro_Hotel-Yogyakarta_Yogyakarta_Region_Java.html"),
#input data yang ingin ditampilkan
sliderInput(
"size",
"Total reviews",
min = 0,
max = 1000,
value = 20
),
#tombol submit
fluidPage(
submitButton("Submit"),
)
),
#sebelah kanan
dashboardBody(
#3box diatas
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("positive_review"),
valueBoxOutput("negative_review")
),
#hasil sentimen
fluidRow(
box(
title = "Sentimen Analisis",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"),
style = "font-size: 70%;")
),
),
#hasil cloud
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 6,
collapsible = T,
plotOutput("wordcloud") %>% withSpinner(color="#1167b1")
),
)
)
)
#pemrosesan data / Backend
server <- function(input, output) {
#get data
data <- reactive({
withProgress({
setProgress(message = "Collecting data", value = 0)
result <- get_pariwisata_reviews(input$url, input$size, incProgress)
})
#mengembalikan hasil scrapping
return(result)
})
#memprediksi data
prediction_data <- reactive({
withProgress({
setProgress(message = "Predicting sentiment", value = 0)
reviews <- data()$review
incProgress(1/2)
prediction <- predict_sentiment(reviews)
incProgress(1/2)
})
prediction$reviewer <- data()$reviewer
return(prediction)
})
#mengeluarkan data dalam bentuk table
output$table_review <- renderDataTable(datatable({
prediction_data()
}))
#data total review diatas
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(prediction_data()), " review"),
icon = icon("pen"),
color = "blue"
)
})
#mengeluarkan data diatas yang positive jumlahnya
output$positive_review <- renderValueBox({
valueBox(
"Positive",
paste0(nrow(prediction_data() %>% filter(sentiment == "Positive")), " review"),
icon = icon("smile"),
color = "green")
})
#mengeluarkan data diatas yang negatif jumlahnya
output$negative_review <- renderValueBox({
valueBox(
"Negative",
paste0(nrow(prediction_data() %>% filter(sentiment == "Negative")), " review"),
icon = icon("frown"),
color = "red")
})
#mengeluarkan data wordcloud / data yang sering disebut
output$wordcloud <- renderPlot({
data.corpus <- clean_data(data()$review)
wordcloud(data.corpus, min.freq = 1,
scale=c(3.5,0.25),
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
shinyApp(ui = ui, server = server)
